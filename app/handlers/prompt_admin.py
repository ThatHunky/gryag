"""Admin commands for system prompt management."""

from __future__ import annotations

import io
import logging
from datetime import datetime

from aiogram import Bot, Router
from aiogram.filters import Command
from aiogram.types import BotCommand, BufferedInputFile, Message

from app.config import Settings
from app.persona import SYSTEM_PERSONA
from app.services.system_prompt_manager import SystemPromptManager

router = Router()
logger = logging.getLogger(__name__)


def get_prompt_commands(prefix: str = "gryag") -> list[BotCommand]:
    """Generate prompt commands with dynamic prefix."""
    return [
        BotCommand(
            command=f"{prefix}prompt",
            description="üîí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)",
        ),
        BotCommand(
            command=f"{prefix}setprompt",
            description="üîí –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)",
        ),
        BotCommand(
            command=f"{prefix}resetprompt",
            description="üîí –°–∫–∏–Ω—É—Ç–∏ –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)",
        ),
        BotCommand(
            command=f"{prefix}prompthistory",
            description="üîí –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–µ—Ä—Å—ñ–π –ø—Ä–æ–º–ø—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)",
        ),
        BotCommand(
            command=f"{prefix}activateprompt",
            description="üîí –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –≤–µ—Ä—Å—ñ—é –ø—Ä–æ–º–ø—Ç—É (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)",
        ),
    ]


# Keep for backwards compatibility (used in main.py)
PROMPT_COMMANDS = get_prompt_commands()

ADMIN_ONLY = "–¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è —Å–≤–æ—ó—Ö. –Ü —è–≤–Ω–æ –Ω–µ –¥–ª—è —Ç–µ–±–µ."


def _is_admin(user_id: int, settings: Settings) -> bool:
    """Check if user is an admin."""
    return user_id in settings.admin_user_ids_list


def _format_prompt_preview(text: str, max_length: int = 200) -> str:
    """Format prompt text for preview display."""
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."


def _format_timestamp(ts: int) -> str:
    """Format Unix timestamp to readable datetime."""
    return datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")


@router.message(Command(commands=["gryagprompt", "prompt"]))
async def view_prompt_command(
    message: Message,
    settings: Settings,
    prompt_manager: SystemPromptManager,
) -> None:
    """View current active system prompt.

    Usage:
        /gryagprompt - View global prompt
        /gryagprompt chat - View chat-specific prompt (if in group)
    """
    if not message.from_user or not _is_admin(message.from_user.id, settings):
        await message.reply(ADMIN_ONLY)
        return

    # Parse scope from command
    scope = "global"
    chat_id_filter = None

    if message.text:
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1 and parts[1].lower() == "chat":
            scope = "chat"
            chat_id_filter = message.chat.id if message.chat.id < 0 else None

    # Get active prompt
    prompt = await prompt_manager.get_active_prompt(chat_id=chat_id_filter)

    if prompt is None:
        response = (
            f"üìã <b>–°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç ({scope})</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–æ–º–ø—Ç\n"
            f"–î–∂–µ—Ä–µ–ª–æ: app/persona.py (SYSTEM_PERSONA)\n\n"
            f"–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–æ–º–ø—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /gryagprompt default"
        )
        await message.reply(response)
        return

    # Format response
    response = (
        f"üìã <b>–ê–∫—Ç–∏–≤–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç</b>\n\n"
        f"Scope: {prompt.scope}\n"
        f"Chat ID: {prompt.chat_id or 'Global'}\n"
        f"–í–µ—Ä—Å—ñ—è: v{prompt.version}\n"
        f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {_format_timestamp(prompt.created_at)}\n"
        f"–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {_format_timestamp(prompt.activated_at) if prompt.activated_at else 'N/A'}\n"
        f"–ê–¥–º—ñ–Ω ID: {prompt.admin_id}\n"
    )

    if prompt.notes:
        response += f"–ù–æ—Ç–∞—Ç–∫–∏: {prompt.notes}\n"

    response += f"\n<b>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:</b>\n{_format_prompt_preview(prompt.prompt_text, 300)}\n"
    response += "\nüíæ –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–∞–π–ª–æ–º."

    # Send preview
    await message.reply(response)

    # Send full prompt as file
    prompt_file = BufferedInputFile(
        prompt.prompt_text.encode("utf-8"),
        filename=f"system_prompt_v{prompt.version}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
    )
    await message.reply_document(
        prompt_file,
        caption=f"–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É (–≤–µ—Ä—Å—ñ—è {prompt.version})",
    )


# This handler checks for "default" argument and shows hardcoded prompt
@router.message(Command(commands=["gryagprompt", "prompt"]))
async def view_default_prompt_command(message: Message, settings: Settings) -> None:
    """Handle /gryagprompt default to view hardcoded prompt."""
    if not message.from_user or not _is_admin(message.from_user.id, settings):
        await message.reply(ADMIN_ONLY)
        return

    if not message.text or "default" not in message.text.lower():
        return  # Let other handler process it

    response = (
        f"üìã <b>–î–µ—Ñ–æ–ª—Ç–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç</b>\n\n"
        f"–î–∂–µ—Ä–µ–ª–æ: app/persona.py (SYSTEM_PERSONA)\n"
        f"–î–æ–≤–∂–∏–Ω–∞: {len(SYSTEM_PERSONA)} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
        f"üíæ –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–∞–π–ª–æ–º."
    )

    await message.reply(response)

    # Send as file
    prompt_file = BufferedInputFile(
        SYSTEM_PERSONA.encode("utf-8"),
        filename=f"default_system_prompt_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
    )
    await message.reply_document(
        prompt_file, caption="–î–µ—Ñ–æ–ª—Ç–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –∑ app/persona.py"
    )


@router.message(Command(commands=["gryagsetprompt", "setprompt"]))
async def set_prompt_command(
    message: Message,
    settings: Settings,
    prompt_manager: SystemPromptManager,
) -> None:
    """Set custom system prompt.

    Usage:
        /gryagsetprompt <multiline_text> - Set global prompt
        /gryagsetprompt chat <multiline_text> - Set chat-specific prompt

        Or reply to a message containing the prompt text
        Or reply to a document (.txt file) containing the prompt
    """
    if not message.from_user or not _is_admin(message.from_user.id, settings):
        await message.reply(ADMIN_ONLY)
        return

    admin_id = message.from_user.id
    prompt_text = None
    scope = "global"
    chat_id_filter = None
    notes = None

    # Check if replying to a document
    if message.reply_to_message and message.reply_to_message.document:
        doc = message.reply_to_message.document
        if doc.mime_type == "text/plain" or doc.file_name.endswith(".txt"):
            # Download document
            file = await message.bot.get_file(doc.file_id)
            file_bytes = io.BytesIO()
            await message.bot.download_file(file.file_path, file_bytes)
            prompt_text = file_bytes.getvalue().decode("utf-8")
            notes = f"Uploaded from file: {doc.file_name}"
        else:
            await message.reply(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª (.txt) –∑ –ø—Ä–æ–º–ø—Ç–æ–º."
            )
            return

    # Check if replying to a text message
    elif message.reply_to_message and message.reply_to_message.text:
        prompt_text = message.reply_to_message.text
        notes = "Set from replied message"

    # Parse command text
    elif message.text:
        parts = message.text.split(maxsplit=2)

        if len(parts) < 2:
            help_text = (
                "üìù <b>–Ø–∫ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç:</b>\n\n"
                "1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç—É:\n"
                "<code>/gryagsetprompt\n"
                "Your custom system prompt here...\n"
                "Can be multiple lines.</code>\n\n"
                "2Ô∏è‚É£ –ê–±–æ –∑—Ä–æ–±—ñ—Ç—å reply –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–º–ø—Ç–æ–º:\n"
                "<code>/gryagsetprompt</code> (reply –¥–æ —Ç–µ–∫—Å—Ç—É)\n\n"
                "3Ô∏è‚É£ –ê–±–æ –∑—Ä–æ–±—ñ—Ç—å reply –Ω–∞ .txt —Ñ–∞–π–ª:\n"
                "<code>/gryagsetprompt</code> (reply –¥–æ —Ñ–∞–π–ª—É)\n\n"
                "4Ô∏è‚É£ –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç—É:\n"
                "<code>/gryagsetprompt chat\n"
                "Chat-specific prompt...</code>\n\n"
                "‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –∑–∞–º—ñ–Ω–∏—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π. –°—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó."
            )
            await message.reply(help_text)
            return

        # Check if chat-specific
        if parts[1].lower() == "chat":
            scope = "chat"
            chat_id_filter = message.chat.id if message.chat.id < 0 else None

            if chat_id_filter is None:
                await message.reply(
                    "‚ùå Chat-specific –ø—Ä–æ–º–ø—Ç–∏ –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö."
                )
                return

            if len(parts) > 2:
                prompt_text = parts[2]
        else:
            # Global prompt
            prompt_text = " ".join(parts[1:])

    if not prompt_text or len(prompt_text.strip()) < 50:
        await message.reply(
            "‚ùå –ü—Ä–æ–º–ø—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤. "
            "–°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –º–∞—î –±—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–º."
        )
        return

    # Confirmation for very short prompts
    if len(prompt_text) < 200:
        await message.reply(
            f"‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π ({len(prompt_text)} —Å–∏–º–≤–æ–ª—ñ–≤). "
            f"–ó–∞–∑–≤–∏—á–∞–π —Å–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ 500+ —Å–∏–º–≤–æ–ª—ñ–≤. –í–ø–µ–≤–Ω–µ–Ω–∏–π? –ù–∞–¥—ñ—à–ª–∏ —â–µ —Ä–∞–∑ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
        )
        return

    # Set the prompt
    try:
        new_prompt = await prompt_manager.set_prompt(
            admin_id=admin_id,
            prompt_text=prompt_text,
            chat_id=chat_id_filter,
            scope=scope,
            notes=notes,
        )

        response = (
            f"‚úÖ <b>–°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"Scope: {new_prompt.scope}\n"
            f"Chat ID: {new_prompt.chat_id or 'Global'}\n"
            f"–í–µ—Ä—Å—ñ—è: v{new_prompt.version}\n"
            f"–î–æ–≤–∂–∏–Ω–∞: {len(new_prompt.prompt_text)} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
            f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–µ—Ä—Å—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ /gryagprompthistory\n"
            f"–°–∫–∏–Ω—É—Ç–∏ –¥–æ –¥–µ—Ñ–æ–ª—Ç—É: /gryagresetprompt"
        )

        await message.reply(response)

        logger.info(
            f"System prompt updated by admin {admin_id}: "
            f"scope={scope}, chat_id={chat_id_filter}, version={new_prompt.version}"
        )

    except Exception as e:
        logger.error(f"Failed to set system prompt: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–æ–º–ø—Ç—É: {e}")


@router.message(Command(commands=["gryagresetprompt", "resetprompt"]))
async def reset_prompt_command(
    message: Message,
    settings: Settings,
    prompt_manager: SystemPromptManager,
) -> None:
    """Reset to default system prompt.

    Usage:
        /gryagresetprompt - Reset global prompt
        /gryagresetprompt chat - Reset chat-specific prompt
    """
    if not message.from_user or not _is_admin(message.from_user.id, settings):
        await message.reply(ADMIN_ONLY)
        return

    admin_id = message.from_user.id
    scope = "global"
    chat_id_filter = None

    # Parse scope
    if message.text:
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1 and parts[1].lower() == "chat":
            scope = "chat"
            chat_id_filter = message.chat.id if message.chat.id < 0 else None

    try:
        reset = await prompt_manager.reset_to_default(
            admin_id=admin_id, chat_id=chat_id_filter, scope=scope
        )

        if reset:
            response = (
                f"‚úÖ <b>–°–∫–∏–Ω—É—Ç–æ –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É</b>\n\n"
                f"Scope: {scope}\n"
                f"Chat ID: {chat_id_filter or 'Global'}\n\n"
                f"–¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–æ–º–ø—Ç –∑ app/persona.py\n"
                f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏: /gryagprompt default"
            )
        else:
            response = (
                f"‚ÑπÔ∏è –í–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è scope={scope}\n"
                f"–ù—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ."
            )

        await message.reply(response)

        logger.info(
            f"System prompt reset by admin {admin_id}: "
            f"scope={scope}, chat_id={chat_id_filter}"
        )

    except Exception as e:
        logger.error(f"Failed to reset system prompt: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –ø—Ä–æ–º–ø—Ç—É: {e}")


@router.message(Command(commands=["gryagprompthistory", "prompthistory"]))
async def prompt_history_command(
    message: Message,
    settings: Settings,
    prompt_manager: SystemPromptManager,
) -> None:
    """View prompt version history.

    Usage:
        /gryagprompthistory - View global prompt history
        /gryagprompthistory chat - View chat-specific history
    """
    if not message.from_user or not _is_admin(message.from_user.id, settings):
        await message.reply(ADMIN_ONLY)
        return

    scope = "global"
    chat_id_filter = None

    # Parse scope
    if message.text:
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1 and parts[1].lower() == "chat":
            scope = "chat"
            chat_id_filter = message.chat.id if message.chat.id < 0 else None

    try:
        history = await prompt_manager.get_prompt_history(
            chat_id=chat_id_filter, scope=scope, limit=10
        )

        if not history:
            await message.reply(
                f"üìã –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è –¥–ª—è scope={scope}\n"
                f"–©–µ –Ω–µ –±—É–ª–æ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤."
            )
            return

        response = f"üìú <b>–Ü—Å—Ç–æ—Ä—ñ—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤</b>\n\n"
        response += f"Scope: {scope}\n"
        response += f"Chat ID: {chat_id_filter or 'Global'}\n"
        response += f"–í—Å—å–æ–≥–æ –≤–µ—Ä—Å—ñ–π: {len(history)}\n\n"

        for prompt in history:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if prompt.is_active else "‚ö™Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            response += (
                f"<b>–í–µ—Ä—Å—ñ—è {prompt.version}</b> {status}\n"
                f"  –°—Ç–≤–æ—Ä–µ–Ω–æ: {_format_timestamp(prompt.created_at)}\n"
                f"  –ê–¥–º—ñ–Ω ID: {prompt.admin_id}\n"
                f"  –î–æ–≤–∂–∏–Ω–∞: {len(prompt.prompt_text)} —Å–∏–º–≤–æ–ª—ñ–≤\n"
            )
            if prompt.notes:
                response += f"  –ù–æ—Ç–∞—Ç–∫–∏: {prompt.notes}\n"
            response += f"  –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥: {_format_prompt_preview(prompt.prompt_text, 100)}\n\n"

        response += (
            f"üí° –©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é:\n"
            f"<code>/gryagactivateprompt VERSION</code>"
        )

        await message.reply(response)

    except Exception as e:
        logger.error(f"Failed to get prompt history: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")


@router.message(Command(commands=["gryagactivateprompt", "activateprompt"]))
async def activate_prompt_version_command(
    message: Message,
    settings: Settings,
    prompt_manager: SystemPromptManager,
) -> None:
    """Activate a specific version from history (rollback).

    Usage:
        /gryagactivateprompt <version> - Activate global prompt version
        /gryagactivateprompt chat <version> - Activate chat-specific version
    """
    if not message.from_user or not _is_admin(message.from_user.id, settings):
        await message.reply(ADMIN_ONLY)
        return

    admin_id = message.from_user.id
    scope = "global"
    chat_id_filter = None
    version = None

    # Parse command
    if not message.text:
        await message.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /gryagactivateprompt <version>")
        return

    parts = message.text.split()

    if len(parts) < 2:
        await message.reply(
            "‚ùå –í–∫–∞–∂—ñ—Ç—å –≤–µ—Ä—Å—ñ—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: <code>/gryagactivateprompt 3</code>\n"
            "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤–µ—Ä—Å—ñ—ó: /gryagprompthistory"
        )
        return

    # Check for chat scope
    if parts[1].lower() == "chat":
        scope = "chat"
        chat_id_filter = message.chat.id if message.chat.id < 0 else None

        if len(parts) < 3:
            await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å –≤–µ—Ä—Å—ñ—é –ø—ñ—Å–ª—è 'chat'")
            return

        try:
            version = int(parts[2])
        except ValueError:
            await message.reply("‚ùå –í–µ—Ä—Å—ñ—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
            return
    else:
        try:
            version = int(parts[1])
        except ValueError:
            await message.reply("‚ùå –í–µ—Ä—Å—ñ—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
            return

    try:
        activated = await prompt_manager.activate_version(
            admin_id=admin_id,
            version=version,
            chat_id=chat_id_filter,
            scope=scope,
        )

        if activated:
            response = (
                f"‚úÖ <b>–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤–µ—Ä—Å—ñ—é {version}</b>\n\n"
                f"Scope: {scope}\n"
                f"Chat ID: {chat_id_filter or 'Global'}\n"
                f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {_format_timestamp(activated.created_at)}\n"
                f"–î–æ–≤–∂–∏–Ω–∞: {len(activated.prompt_text)} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
                f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏: /gryagprompt"
            )
        else:
            response = (
                f"‚ùå –í–µ—Ä—Å—ñ—é {version} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è scope={scope}\n"
                f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–µ—Ä—Å—ñ—ó: /gryagprompthistory"
            )

        await message.reply(response)

        if activated:
            logger.info(
                f"Activated prompt version {version} by admin {admin_id}: "
                f"scope={scope}, chat_id={chat_id_filter}"
            )

    except Exception as e:
        logger.error(f"Failed to activate prompt version: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–µ—Ä—Å—ñ—ó: {e}")
