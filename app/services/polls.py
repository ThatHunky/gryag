"""
Polls tool for GRYAG bot.

Provides poll creation, voting, and results tracking functionality.
Supports anonymous and named voting modes.
"""

from __future__ import annotations

import json
import logging
import time
from datetime import datetime, timedelta
from typing import Any, Optional
from dataclasses import dataclass
from enum import Enum

# Import logging framework
try:
    from app.services.tool_logging import log_tool_execution, ToolLogger
except ImportError:
    # Fallback if logging framework not available
    log_tool_execution = lambda name: lambda f: f  # No-op decorator
    ToolLogger = None

# Setup tool logger
tool_logger = ToolLogger("polls") if ToolLogger else None
logger = logging.getLogger(__name__)


# Temporary in-memory storage for polls (will be replaced with database)
_active_polls = {}
_poll_votes = {}


# Temporary in-memory storage for polls (will be replaced with database)
_active_polls = {}
_poll_votes = {}


def _generate_poll_id(chat_id: int, thread_id: Optional[int]) -> str:
    """Generate a unique poll ID."""
    return f"poll_{chat_id}_{thread_id or 0}_{int(time.time())}"


def _format_poll_display(poll_data: dict[str, Any]) -> str:
    """Format poll for display."""
    poll_text = f"üìã **–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è**\n\n"
    poll_text += f"‚ùì **{poll_data['question']}**\n\n"

    total_votes = sum(opt["votes"] for opt in poll_data["options"])

    for i, option in enumerate(poll_data["options"]):
        votes = option["votes"]
        percentage = (votes / total_votes * 100) if total_votes > 0 else 0
        poll_text += f"{i + 1}. {option['text']}"
        if votes > 0:
            poll_text += f" ({votes} - {percentage:.1f}%)"
        poll_text += "\n"

    poll_text += "\n"

    if poll_data.get("allow_multiple"):
        poll_text += "‚úÖ –ú–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤\n"

    if poll_data.get("is_anonymous"):
        poll_text += "üï∂Ô∏è –ê–Ω–æ–Ω—ñ–º–Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è\n"

    if poll_data.get("expires_at"):
        expires = datetime.fromisoformat(poll_data["expires_at"])
        if datetime.now() > expires:
            poll_text += "‚è∞ –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
        else:
            remaining = expires - datetime.now()
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            poll_text += f"‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {hours}–≥ {minutes}—Ö–≤\n"

    poll_text += f"\nüí¨ –î–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É"

    return poll_text


def _create_poll_data(
    chat_id: int,
    thread_id: Optional[int],
    creator_id: int,
    question: str,
    options: list[str],
    poll_type: str = "regular",
    duration_hours: Optional[int] = None,
) -> dict[str, Any]:
    """Create poll data structure."""
    poll_id = _generate_poll_id(chat_id, thread_id)

    expires_at = None
    if duration_hours:
        expires_at = (datetime.now() + timedelta(hours=duration_hours)).isoformat()

    return {
        "id": poll_id,
        "chat_id": chat_id,
        "thread_id": thread_id,
        "creator_id": creator_id,
        "question": question.strip(),
        "options": [
            {"text": opt.strip()[:100], "votes": 0} for opt in options if opt.strip()
        ],
        "poll_type": poll_type,
        "created_at": datetime.now().isoformat(),
        "expires_at": expires_at,
        "is_closed": False,
        "allow_multiple": (poll_type == "multiple"),
        "is_anonymous": (poll_type == "anonymous"),
    }


@log_tool_execution("polls")
async def polls_tool(params: dict[str, Any]) -> str:
    """
    Polls tool function for GRYAG bot.

    Handles poll creation, voting, and results.

    Args:
        params: Tool parameters containing action and relevant data

    Returns:
        JSON string with operation result
    """
    action = params.get("action", "")

    try:
        if tool_logger:
            tool_logger.debug(
                f"Poll action: {action}",
                action=action,
                params_keys=list(params.keys()),
            )

        if action == "create":
            return await _handle_create_poll(params)
        elif action == "vote":
            return await _handle_vote_poll(params)
        elif action == "results":
            return await _handle_get_results(params)
        else:
            return json.dumps(
                {"success": False, "error": f"–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è: {action}"},
                ensure_ascii=False,
            )

    except Exception as e:
        logger.error(f"Poll tool error: {e}", exc_info=True)
        if tool_logger:
            tool_logger.error(f"Poll tool error: {e}", exc_info=True)

        return json.dumps(
            {"success": False, "error": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É –æ–ø–∏—Ç—É–≤–∞–Ω—å"},
            ensure_ascii=False,
        )


async def _handle_create_poll(params: dict[str, Any]) -> str:
    """Handle poll creation."""
    chat_id = params.get("chat_id")
    thread_id = params.get("thread_id")
    creator_id = params.get("creator_id")
    question = params.get("question", "")
    options = params.get("options", [])
    poll_type = params.get("poll_type", "regular")
    duration_hours = params.get("duration_hours")

    # Validate inputs
    if not all([chat_id, creator_id, question]):
        return json.dumps(
            {"success": False, "error": "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"},
            ensure_ascii=False,
        )

    if len(options) < 2:
        return json.dumps(
            {
                "success": False,
                "error": "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º–∞—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
            },
            ensure_ascii=False,
        )

    if len(options) > 10:
        return json.dumps(
            {
                "success": False,
                "error": "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–µ –º–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
            },
            ensure_ascii=False,
        )

    if len(question) > 200:
        return json.dumps(
            {"success": False, "error": "–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 200 —Å–∏–º–≤–æ–ª—ñ–≤"},
            ensure_ascii=False,
        )

    # Create poll (types already validated above)
    poll_data = _create_poll_data(
        chat_id,  # type: ignore[arg-type]
        thread_id,
        creator_id,  # type: ignore[arg-type]
        question,
        options,
        poll_type,
        duration_hours,
    )

    # Store in memory (will be database later)
    _active_polls[poll_data["id"]] = poll_data
    _poll_votes[poll_data["id"]] = {}

    # Format for display
    poll_text = _format_poll_display(poll_data)

    if tool_logger:
        tool_logger.info(
            "Poll created",
            poll_id=poll_data["id"],
            options_count=len(options),
            poll_type=poll_type,
        )

    return json.dumps(
        {
            "success": True,
            "poll_id": poll_data["id"],
            "poll_text": poll_text,
            "expires_at": poll_data.get("expires_at"),
        },
        ensure_ascii=False,
    )


async def _handle_vote_poll(params: dict[str, Any]) -> str:
    """Handle voting on a poll."""
    poll_id = params.get("poll_id", "")
    user_id = params.get("user_id")
    option_indices = params.get("option_indices", [])

    if not all([poll_id, user_id]):
        return json.dumps(
            {"success": False, "error": "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"},
            ensure_ascii=False,
        )

    # Get poll
    poll_data = _active_polls.get(poll_id)
    if not poll_data:
        return json.dumps(
            {"success": False, "error": "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, ensure_ascii=False
        )

    # Check if poll is expired
    if poll_data.get("expires_at"):
        expires = datetime.fromisoformat(poll_data["expires_at"])
        if datetime.now() > expires:
            poll_data["is_closed"] = True
            return json.dumps(
                {"success": False, "error": "–¢–µ—Ä–º—ñ–Ω –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤"},
                ensure_ascii=False,
            )

    if poll_data["is_closed"]:
        return json.dumps(
            {"success": False, "error": "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ"}, ensure_ascii=False
        )

    # Validate option indices
    valid_indices = []
    for idx in option_indices:
        if 0 <= idx < len(poll_data["options"]):
            valid_indices.append(idx)

    if not valid_indices:
        return json.dumps(
            {"success": False, "error": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"},
            ensure_ascii=False,
        )

    # Check voting rules
    if not poll_data["allow_multiple"] and len(valid_indices) > 1:
        return json.dumps(
            {
                "success": False,
                "error": "–í —Ü—å–æ–º—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ –º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç",
            },
            ensure_ascii=False,
        )

    # Check if user already voted
    poll_votes = _poll_votes.get(poll_id, {})
    if user_id in poll_votes and not poll_data["allow_multiple"]:
        return json.dumps(
            {"success": False, "error": "–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –≤ —Ü—å–æ–º—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ"},
            ensure_ascii=False,
        )

    # Record votes
    if user_id not in poll_votes:
        poll_votes[user_id] = []

    # Remove old votes if not allowing multiple votes
    if not poll_data["allow_multiple"]:
        for old_idx in poll_votes[user_id]:
            if 0 <= old_idx < len(poll_data["options"]):
                poll_data["options"][old_idx]["votes"] -= 1
        poll_votes[user_id] = []

    # Add new votes
    for idx in valid_indices:
        if idx not in poll_votes[user_id]:
            poll_votes[user_id].append(idx)
            poll_data["options"][idx]["votes"] += 1

    _poll_votes[poll_id] = poll_votes

    # Format updated poll
    poll_text = _format_poll_display(poll_data)

    if tool_logger:
        tool_logger.info(
            "Vote recorded",
            poll_id=poll_id,
            user_id=user_id,
            votes_cast=len(valid_indices),
        )

    return json.dumps(
        {"success": True, "poll_text": poll_text, "message": "–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!"},
        ensure_ascii=False,
    )


async def _handle_get_results(params: dict[str, Any]) -> str:
    """Handle getting poll results."""
    poll_id = params.get("poll_id", "")

    if not poll_id:
        return json.dumps(
            {"success": False, "error": "–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"}, ensure_ascii=False
        )

    poll_data = _active_polls.get(poll_id)
    if not poll_data:
        return json.dumps(
            {"success": False, "error": "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, ensure_ascii=False
        )

    # Generate detailed results
    total_votes = sum(opt["votes"] for opt in poll_data["options"])

    results_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:**\n\n"
    results_text += f"‚ùì **{poll_data['question']}**\n\n"

    for i, option in enumerate(poll_data["options"]):
        votes = option["votes"]
        percentage = (votes / total_votes * 100) if total_votes > 0 else 0
        bar_length = int(percentage / 10)  # 10% per bar segment
        bar = "‚ñà" * bar_length + "‚ñë" * (10 - bar_length)
        results_text += f"{i + 1}. {option['text']}\n"
        results_text += f"`{bar}` {votes} ({percentage:.1f}%)\n\n"

    results_text += f"üë• –í—Å—å–æ–≥–æ –≥–æ–ª–æ—Å—ñ–≤: {total_votes}\n"

    if poll_data.get("expires_at"):
        expires = datetime.fromisoformat(poll_data["expires_at"])
        if datetime.now() > expires:
            results_text += "‚è∞ –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
        else:
            remaining = expires - datetime.now()
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            results_text += f"‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {hours}–≥ {minutes}—Ö–≤\n"

    if tool_logger:
        tool_logger.info(
            "Results retrieved",
            poll_id=poll_id,
            total_votes=total_votes,
        )

    return json.dumps(
        {
            "success": True,
            "results_text": results_text,
            "total_votes": total_votes,
        },
        ensure_ascii=False,
    )


# Tool definition for Gemini integration
POLLS_TOOL_DEFINITION = {
    "function_declarations": [
        {
            "name": "polls",
            "description": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω—å, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "enum": ["create", "vote", "results"],
                        "description": "–î—ñ—è: create - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, vote - –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏, results - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    },
                    "chat_id": {
                        "type": "integer",
                        "description": "ID —á–∞—Ç—É (–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è)",
                    },
                    "thread_id": {
                        "type": "integer",
                        "description": "ID —Ç—Ä–µ–¥—É/—Ç–æ–ø—ñ–∫—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
                    },
                    "creator_id": {
                        "type": "integer",
                        "description": "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞-—Å—Ç–≤–æ—Ä—é–≤–∞—á–∞ (–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)",
                    },
                    "question": {
                        "type": "string",
                        "description": "–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)",
                    },
                    "options": {
                        "type": "array",
                        "items": {"type": "string"},
                        "description": "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)",
                    },
                    "poll_type": {
                        "type": "string",
                        "enum": ["regular", "multiple", "anonymous"],
                        "description": "–¢–∏–ø –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: regular - –∑–≤–∏—á–∞–π–Ω–µ, multiple - –±–∞–≥–∞—Ç–æ–≤–∏–±—ñ—Ä, anonymous - –∞–Ω–æ–Ω—ñ–º–Ω–µ",
                    },
                    "duration_hours": {
                        "type": "integer",
                        "description": "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤ –≥–æ–¥–∏–Ω–∞—Ö (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
                    },
                    "poll_id": {
                        "type": "string",
                        "description": "ID –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)",
                    },
                    "user_id": {
                        "type": "integer",
                        "description": "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)",
                    },
                    "option_indices": {
                        "type": "array",
                        "items": {"type": "integer"},
                        "description": "–Ü–Ω–¥–µ–∫—Å–∏ –æ–±—Ä–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ (0-based, –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)",
                    },
                },
                "required": ["action"],
            },
        }
    ]
}
