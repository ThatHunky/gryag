#include "gryag/handlers/prompt_admin_handler.hpp"

#include "gryag/services/prompt/system_prompt_manager.hpp"

#include <spdlog/spdlog.h>

#include <algorithm>
#include <sstream>
#include <string_view>

namespace gryag::handlers {

namespace {

std::string_view normalize_command(std::string_view text) {
    if (text.empty() || text.front() != '/') {
        return {};
    }
    auto end = text.find(' ');
    auto command = text.substr(0, end);
    const auto at = command.find('@');
    if (at != std::string_view::npos) {
        command = command.substr(0, at);
    }
    return command;
}

std::string format_prompt_preview(const services::prompt::SystemPrompt& prompt) {
    std::ostringstream oss;
    oss << "üß≠ –í–µ—Ä—Å—ñ—è #" << prompt.version << " (" << prompt.scope << ")\n";
    oss << "‚úçÔ∏è –û–Ω–æ–≤–∏–≤: " << prompt.admin_id << "\n";
    if (prompt.chat_id) {
        oss << "–ß–∞—Ç: " << *prompt.chat_id << "\n";
    } else {
        oss << "–ß–∞—Ç: –≥–ª–æ–±–∞–ª—å–Ω–∏–π\n";
    }
    oss << "üîì –ê–∫—Ç–∏–≤–Ω–∏–π: " << (prompt.is_active ? "—Ç–∞–∫" : "–Ω—ñ") << "\n\n";
    if (prompt.prompt_text.size() > 800) {
        oss << prompt.prompt_text.substr(0, 800) << "‚Ä¶";
    } else {
        oss << prompt.prompt_text;
    }
    if (prompt.notes && !prompt.notes->empty()) {
        oss << "\n\nüìù –ù–æ—Ç–∞—Ç–∫–∞: " << *prompt.notes;
    }
    return oss.str();
}

}  // namespace

PromptAdminHandler::PromptAdminHandler(HandlerContext& ctx) : ctx_(ctx) {}

bool PromptAdminHandler::handle(const telegram::Message& message, telegram::TelegramClient& client) {
    if (message.text.empty()) {
        return false;
    }
    auto command = normalize_command(message.text);
    if (command == "/gryagprompt" || command == "/prompt") {
        return handle_show_prompt(message, client);
    }
    if (command == "/gryagpromptset" || command == "/promptset") {
        return handle_set_prompt(message, client);
    }
    if (command == "/gryagpromptreset" || command == "/promptreset") {
        return handle_reset_prompt(message, client);
    }
    if (command == "/gryagpromptlist" || command == "/promptlist") {
        return handle_list_prompts(message, client);
    }
    return false;
}

bool PromptAdminHandler::handle_show_prompt(const telegram::Message& message,
                                            telegram::TelegramClient& client) {
    if (!ctx_.prompt_manager) {
        return false;
    }
    const auto prompt = ctx_.prompt_manager->active_prompt(message.chat.id);
    if (!prompt) {
        client.send_message(message.chat.id,
                            "üîß –ê–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–µ—Ä—Å–æ–Ω—É.",
                            message.message_id);
        return true;
    }

    auto preview = format_prompt_preview(*prompt);
    client.send_message(message.chat.id, preview, message.message_id);
    return true;
}

bool PromptAdminHandler::handle_set_prompt(const telegram::Message& message,
                                           telegram::TelegramClient& client) {
    if (!ctx_.prompt_manager) {
        return false;
    }
    if (!ensure_admin(message, client)) {
        return true;
    }
    if (!message.from) {
        return true;
    }

    std::string_view text = message.text;
    const auto first_space = text.find(' ');
    if (first_space == std::string_view::npos) {
        client.send_message(message.chat.id,
                            "üìå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /gryagpromptset <—Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É> [--global]",
                            message.message_id);
        return true;
    }
    text.remove_prefix(first_space + 1);
    auto argument = trim_argument(text);
    if (argument.empty()) {
        client.send_message(message.chat.id,
                            "üìå –î–∞–π –º–µ–Ω—ñ —Ö–æ—á —è–∫–∏–π—Å—å —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.",
                            message.message_id);
        return true;
    }

    bool global_scope = false;
    if (argument.rfind("--global", 0) == 0) {
        global_scope = true;
        argument = trim_argument(argument.substr(std::string_view{"--global"}.size()));
        if (argument.empty()) {
            client.send_message(message.chat.id,
                                "ü§î –ü—ñ—Å–ª—è '--global' –≤—Å–µ –æ–¥–Ω–æ —Ç—Ä–µ–±–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É.",
                                message.message_id);
            return true;
        }
    }

    try {
        const std::string scope = global_scope ? "global"
            : (message.chat.id > 0 ? "personal" : "chat");
        std::optional<std::int64_t> target_chat;
        if (!global_scope) {
            target_chat = message.chat.id;
        }

        auto prompt = ctx_.prompt_manager->set_prompt(
            message.from->id,
            std::string{argument},
            target_chat,
            scope
        );

        auto preview = format_prompt_preview(prompt);
        client.send_message(message.chat.id,
                            "‚úÖ –û–Ω–æ–≤–∏–≤ –ø—Ä–æ–º–ø—Ç:\n\n" + preview,
                            message.message_id);
    } catch (const std::exception& ex) {
        spdlog::error("Failed to set prompt: {}", ex.what());
        client.send_message(message.chat.id,
                            "‚ùå –ù–µ –≤–∏–π—à–ª–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º–ø—Ç. –ü–æ–¥—Ä–æ–±–∏—Ü—ñ –≤ –ª–æ–≥–∞—Ö.",
                            message.message_id);
    }
    return true;
}

bool PromptAdminHandler::handle_reset_prompt(const telegram::Message& message,
                                             telegram::TelegramClient& client) {
    if (!ctx_.prompt_manager) {
        return false;
    }
    if (!ensure_admin(message, client)) {
        return true;
    }

    try {
        ctx_.prompt_manager->reset_chat_prompt(message.chat.id);
        client.send_message(message.chat.id,
                            "‚ôªÔ∏è –°–∫–∏–Ω—É–≤ —á–∞—Ç-–ø—Ä–æ–º–ø—Ç. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ.",
                            message.message_id);
    } catch (const std::exception& ex) {
        spdlog::error("Failed to reset prompt: {}", ex.what());
        client.send_message(message.chat.id,
                            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å —Å–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–º–ø—Ç. –Ñ –ø–æ–º–∏–ª–∫–∞ —É –ª–æ–≥–∞—Ö.",
                            message.message_id);
    }
    return true;
}

bool PromptAdminHandler::handle_list_prompts(const telegram::Message& message,
                                             telegram::TelegramClient& client) {
    if (!ctx_.prompt_manager) {
        return false;
    }
    if (!ensure_admin(message, client)) {
        return true;
    }

    try {
        auto chat_prompts = ctx_.prompt_manager->list_prompts(message.chat.id, std::nullopt, 5);
        auto global_prompts = ctx_.prompt_manager->list_prompts(std::nullopt, std::string{"global"}, 5);

        std::ostringstream oss;
        if (!chat_prompts.empty()) {
            oss << "üìö –û—Å—Ç–∞–Ω–Ω—ñ —á–∞—Ç-–ø—Ä–æ–º–ø—Ç–∏:\n";
            for (const auto& prompt : chat_prompts) {
                oss << " ‚Ä¢ #" << prompt.version << " ("
                    << (prompt.is_active ? "–∞–∫—Ç–∏–≤–Ω–∏–π" : "–∞—Ä—Ö—ñ–≤") << ")"
                    << " ‚Äî " << prompt.prompt_text.substr(0, 80);
                if (prompt.prompt_text.size() > 80) {
                    oss << "‚Ä¶";
                }
                oss << "\n";
            }
        } else {
            oss << "üìö –î–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –Ω–µ–º–∞ –≤–ª–∞—Å–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤.\n";
        }

        if (!global_prompts.empty()) {
            oss << "\nüåç –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏:\n";
            for (const auto& prompt : global_prompts) {
                oss << " ‚Ä¢ #" << prompt.version << " "
                    << (prompt.is_active ? "(–∞–∫—Ç–∏–≤–Ω–∏–π)" : "(–∞—Ä—Ö—ñ–≤)") << "\n";
            }
        }

        client.send_message(message.chat.id, oss.str(), message.message_id);
    } catch (const std::exception& ex) {
        spdlog::error("Failed to list prompts: {}", ex.what());
        client.send_message(message.chat.id,
                            "‚ùå –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤.",
                            message.message_id);
    }
    return true;
}

bool PromptAdminHandler::ensure_admin(const telegram::Message& message,
                                      telegram::TelegramClient& client) const {
    if (!ctx_.settings || !message.from) {
        return false;
    }
    const auto user_id = message.from->id;
    const auto& admins = ctx_.settings->admin_user_ids;
    const auto is_admin = std::find(admins.begin(), admins.end(), user_id) != admins.end();
    if (!is_admin) {
        client.send_message(message.chat.id,
                            "üö´ –¶–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤, –¥—Ä—É–∂–µ.",
                            message.message_id);
    }
    return is_admin;
}

std::string PromptAdminHandler::trim_argument(std::string_view argument) const {
    const auto start = argument.find_first_not_of(" \t\n\r");
    if (start == std::string_view::npos) {
        return {};
    }
    const auto end = argument.find_last_not_of(" \t\n\r");
    return std::string(argument.substr(start, end - start + 1));
}

}  // namespace gryag::handlers

