[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "docs*", "scripts*"]

[project]
name = "gryag"
version = "0.1.0"
description = "Телеграм-бот «гряг»: дотепний груповий асистент на Gemini."
readme = "README.md"
authors = [{ name = "gryag maintainers" }]
requires-python = ">=3.11"
license = { text = "MIT" }
dependencies = [
    "aiogram>=3.5",
    "google-genai>=0.2.0",
    "aiosqlite>=0.20",
    "pydantic>=2.6",
    "pydantic-settings>=2.2",
    "redis>=5.0",
    "aiohttp>=3.9",
    "python-dotenv>=1.0",
    "apscheduler>=3.10",
    "psutil>=5.9",
    "tzdata>=2024.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.0",
    "pytest-timeout>=2.2",
    "ruff>=0.1.0",
    "black>=23.0",
    "mypy>=1.7",
    "isort>=5.12",
]

[project.urls]
Homepage = "https://github.com/example/gryag"

[project.scripts]
gryag = "app.main:run"

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["."]  # Add repo root to sys.path for imports
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage settings (temporarily disabled - re-enable after confirming pytest-cov works)
addopts = """
    -ra
    --strict-markers
    --strict-config
"""
# To re-enable coverage: add --cov=app --cov-report=term-missing:skip-covered --cov-report=html --cov-report=xml

# Markers for test categorization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "asyncio: marks tests as async (auto-used by pytest-asyncio)",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (we'll handle this gradually)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py are ok

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, will tighten later
ignore_missing_imports = true
