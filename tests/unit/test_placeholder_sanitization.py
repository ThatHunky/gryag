"""
Tests for placeholder pattern sanitization in conversation context.

Ensures that placeholder patterns (TGFMT1, RAW2, etc.) don't leak into
conversation history and get regenerated by the LLM.
"""

import pytest

from app.services.conversation_formatter import (
    sanitize_placeholder_text,
    format_message_compact,
)


class TestPlaceholderSanitization:
    """Test suite for placeholder pattern sanitization."""

    def test_sanitize_removes_unicode_delimiters(self):
        """Unicode Private Use Area characters should be removed."""
        text = "Hello \ue000TGFMT1\ue001 world"
        result = sanitize_placeholder_text(text)
        assert result == "Hello  world"

    def test_sanitize_removes_bare_tgfmt_patterns(self):
        """Bare TGFMT patterns without delimiters should be removed."""
        text = "Hello TGFMT1 world TGFMT2 test"
        result = sanitize_placeholder_text(text)
        assert result == "Hello  world  test"

    def test_sanitize_removes_bare_raw_patterns(self):
        """Bare RAW patterns without delimiters should be removed."""
        text = "Hello RAW1 world RAW2 test"
        result = sanitize_placeholder_text(text)
        assert result == "Hello  world  test"

    def test_sanitize_handles_mixed_patterns(self):
        """Multiple pattern types should all be removed."""
        text = "бонгоTGFMT1порноTGFMT2LLMTGFMT3хуйнюTGFMT42025-гоTGFMT5Нові"
        result = sanitize_placeholder_text(text)
        # Should remove all TGFMT patterns
        assert "TGFMT" not in result
        # Should preserve actual text
        assert "бонго" in result
        assert "порно" in result
        assert "Нові" in result

    def test_sanitize_handles_none(self):
        """None input should return None."""
        result = sanitize_placeholder_text(None)
        assert result is None

    def test_sanitize_handles_empty_string(self):
        """Empty string should return empty string."""
        result = sanitize_placeholder_text("")
        assert result == ""

    def test_sanitize_preserves_normal_text(self):
        """Normal text without patterns should be unchanged."""
        text = "Hello world! This is normal text."
        result = sanitize_placeholder_text(text)
        assert result == text

    def test_sanitize_in_format_message_compact(self):
        """Placeholder patterns in message text should be sanitized."""
        result = format_message_compact(
            user_id=123456,
            username="TestUser",
            text="Hello TGFMT1 world TGFMT2 test",
            is_bot=False,
        )
        # Placeholder patterns should be removed from output
        assert "TGFMT" not in result
        # Normal text should be preserved
        assert "Hello" in result
        assert "world" in result
        assert "test" in result

    def test_sanitize_in_reply_excerpt(self):
        """Placeholder patterns in reply excerpts should be sanitized."""
        result = format_message_compact(
            user_id=123456,
            username="Alice",
            text="My reply",
            reply_to_user_id=789012,
            reply_to_username="Bob",
            reply_excerpt="Original message with TGFMT1 pattern TGFMT2 here",
            is_bot=False,
        )
        # Placeholder patterns should be removed from reply excerpt
        assert "TGFMT" not in result
        # Reply structure should be preserved
        assert "[↩︎ Bob:" in result
        assert "My reply" in result

    def test_real_world_leaked_pattern(self):
        """Test case from actual bot logs."""
        # This is the pattern seen in production logs
        # Note: The actual structure was "2025" + TGFMT4 + "-го", so removing
        # TGFMT4 concatenates "2025" directly with "-го"
        contaminated = "О, батько, ти після бонгоTGFMT1порноTGFMT2LLMTGFMT3хуйнюTGFMT42025-гоTGFMT5Нові Єбаки"
        cleaned = sanitize_placeholder_text(contaminated)

        # All TGFMT patterns should be gone
        assert "TGFMT" not in cleaned

        # Actual content should remain (words that weren't split by patterns)
        assert "бонго" in cleaned
        assert "порно" in cleaned
        assert "хуйню" in cleaned
        assert "Нові Єбаки" in cleaned
        # Note: "2025-го" was split by TGFMT4, becomes "2025" + "-го"
        assert "-го" in cleaned

    def test_format_for_telegram_removes_leaked_patterns(self):
        """The output formatter should also catch any leaked patterns."""
        from app.handlers.chat import _format_for_telegram

        # Even if placeholders leak through, final formatter should catch them
        text = "Hello TGFMT1 world RAW2 test"
        result = _format_for_telegram(text)

        # Patterns should be removed
        assert "TGFMT" not in result
        assert "RAW" not in result

        # Normal text preserved
        assert "Hello" in result
        assert "world" in result
        assert "test" in result
